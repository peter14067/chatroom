{"version":3,"sources":["index.js"],"names":["Main","useState","ws","setWs","useEffect","console","log","initWebSocket","on","message","close","sendMessage","name","emit","onChange","event","room","target","value","type","onClick","webSocket","ReactDom","render","document","getElementById"],"mappings":"0MAIMA,EAAO,WAAO,IAAD,EACIC,mBAAS,MADb,mBACRC,EADQ,KACLC,EADK,KAefC,qBAAU,WACHF,IAECG,QAAQC,IAAI,oBAEZC,OAEN,CAACL,IAEH,IAAMK,EAAgB,WAElBL,EAAGM,GAAG,cAAc,SAAAC,GAChBJ,QAAQC,IAAIG,MAIhBP,EAAGM,GAAG,iBAAiB,SAAAC,GACrBJ,QAAQC,IAAIG,MAEhBP,EAAGM,GAAG,kBAAkB,SAAAC,GACpBJ,QAAQC,IAAIG,MAIhBP,EAAGM,GAAG,aAAa,SAAAC,GACjBJ,QAAQC,IAAIG,MAGhBP,EAAGM,GAAG,iBAAiB,WACnBN,EAAGQ,WAKPR,EAAGM,GAAG,WAAW,SAAAC,GACfJ,QAAQC,IAAIG,OAKRE,EAAc,SAACC,GAEjBV,EAAGW,KAAKD,EAAM,oCAgBlB,OACI,6BAEA,4BAAQE,SAbG,SAACC,GAClB,IAAIC,EAAOD,EAAME,OAAOC,MACZ,KAATF,GACCd,EAAGW,KAAK,UAAWG,KAWb,4BAAQE,MAAM,IAAd,kCACA,4BAAQA,MAAM,SAAd,sBACA,4BAAQA,MAAM,SAAd,uBAIJ,2BAAOC,KAAK,SAASD,MAAM,eAAKE,QAzEX,WAErBjB,EAAMkB,IAAU,6BAwEhB,2BAAOF,KAAK,SAASD,MAAM,iFAAgBE,QAAS,WAAQT,EAAY,iBACxE,2BAAOQ,KAAK,SAASD,MAAM,iFAAgBE,QAAS,WAAQT,EAAY,oBACxE,2BAAOQ,KAAK,SAASD,MAAM,yGAAoBE,QAAS,WAAQT,EAAY,qBAC5E,2BAAOQ,KAAK,SAASD,MAAM,eAAKE,QApFR,WAE1BlB,EAAGW,KAAK,gBAAiB,YAyF/BS,IAASC,OAAO,kBAACvB,EAAD,MAAUwB,SAASC,eAAe,U","file":"static/js/main.a7aebfa3.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport ReactDom from 'react-dom'\nimport webSocket from 'socket.io-client'\n\nconst Main = () => {\n    const [ws,setWs] = useState(null)\n\n    const disConnectWebSocket = () =>{\n      //向 Server 送出申請中斷的訊息，讓它通知其他 Client\n      ws.emit('disConnection', 'XXX')\n  }\n\n\n\n    const connectWebSocket = () => {\n        //開啟\n        setWs(webSocket('http://localhost:3000'))\n    }\n\n    useEffect(()=>{\n        if(ws){\n            //連線成功在 console 中打印訊息\n            console.log('success connect!')\n            //設定監聽\n            initWebSocket()\n        }\n    },[ws])\n\n    const initWebSocket = () => {\n        //對 getMessage 設定監聽，如果 server 有透過 getMessage 傳送訊息，將會在此被捕捉\n        ws.on('getMessage', message => {\n            console.log(message)\n        })\n\n\n        ws.on('getMessageAll', message => {\n          console.log(message)\n      })\n      ws.on('getMessageLess', message => {\n          console.log(message)\n      })\n\n\n      ws.on('leaveRoom', message => {\n        console.log(message)\n    })\n    // Server 通知完後再傳送 disConnection 通知關閉連線\n    ws.on('disConnection', () => {\n        ws.close()\n    })\n\n\n      \n    ws.on('addRoom', message => {\n      console.log(message)\n  })\n\n    }\n\n    const sendMessage = (name) => {\n       \n        ws.emit(name, '收到訊息囉!')\n    }\n\n\n\n\nconst changeRoom = (event) => {\n  let room = event.target.value\n  if(room !== ''){\n      ws.emit('addRoom', room)\n  }\n}\n\n\n\n\n    return(\n        <div>\n\n        <select onChange={changeRoom}>\n            <option value=''>請選擇房間</option>\n            <option value='room1'>房間一</option>\n            <option value='room2'>房間二</option>\n        </select>\n\n          \n        <input type='button' value='連線' onClick={connectWebSocket} />\n        <input type='button' value='送出訊息，只有自己收到回傳' onClick={() => { sendMessage('getMessage') }} />\n        <input type='button' value='送出訊息，讓所有人收到回傳' onClick={() => { sendMessage('getMessageAll') }} />\n        <input type='button' value='送出訊息，除了自己外所有人收到回傳' onClick={() => { sendMessage('getMessageLess') }} />\n        <input type='button' value='斷線' onClick={disConnectWebSocket} />\n\n\n        </div>\n    )\n}\n\nReactDom.render(<Main />, document.getElementById('root'))"],"sourceRoot":""}